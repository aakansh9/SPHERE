{
    "collab_server" : "",
    "contents" : "library(xgboost)\nlibrary(dplyr)\n\nfeats1 = read.csv('data/working/features/accel_feat.csv')\nfeats2 = read.csv('data/working/features/AP_feats.csv')\nfeats3 = read.csv('data/working/features/video_feat.csv')\ntargets = read.csv('data/working/features/targets.csv')\nfeats = cbind.data.frame(feats1, feats2) %>% cbind.data.frame(feats3)\nrm(feats1, feats2, feats3)\ngc()\n\n# class weights\ncweights = c(1.35298455691,1.38684574053,1.59587388404,1.35318713948,0.347783666015,0.661081706198,1.04723628621,0.398865222651,\n             0.207586320237,1.50578335208,0.110181365961,1.07803284435,1.36560417316,1.17024113802,1.1933637414,1.1803704493,\n             1.34414875433,1.11683830693,1.08083910312,0.503152249073)\n\n\n# parameters\nparams = list(booster = 'gbtree',\n              objective = 'reg:logistic',\n              eta = 0.1, # [500] 0.2059921+0.00275667  0.2357373+0.02353194\n              subsample=0.6,\n              colsample_bytree=0.9,\n              max_depth=5, # 2 [100] 0.20522+0.003013858  0.2360499+0.02452221, 3 [100] 0.1816438+0.00311104  0.2355763, 4 [100] 0.1564062+0.002854183  0.2367746+0.02612863+0.02516619\n              verbose=1,\n              silent=1,\n              nthread=15)\n\n\n# data as 20 dimensional dmatrix\ndata <- lapply(1:20, function(c) xgb.DMatrix(data=data.matrix(feats), label=as.numeric(targets[,c]), missing=NA))\n\n# folds\nfolds = list(1:1753, 1754:3395, 3396:4911, 4912:6448, 6449:7955, 7956:9347, 9348:10852, 10853:12520, 12521:14345, 14346:16124)\n\n# slice data into folds and create boosters = 10 folds X 20 boosters/fold X {train,test}/booster\nbooster_folds <- lapply(1:length(folds), function(k){\n  test = lapply(1:20, function(c) xgboost:::slice(data[[c]], folds[[k]]))\n  train = lapply(1:20, function(c) xgboost:::slice(data[[c]], unlist(folds[-k])))\n  booster = lapply(1:20, function(c) xgboost:::xgb.Booster(params = params, cachelist = list(train[[c]], test[[c]])))\n  res = list(train=train, test=test, booster=booster)\n  return(res)\n})\n\n# Brier score eval func\nBS <- function(preds, train){\n  labels = lapply(1:20, function(c) getinfo(train[[c]], 'label'))\n  err = lapply(1:20, function(c) sum(cweights[c]*(preds[[c]] - labels[[c]])^2)/length(labels[[c]]))\n  err = sum(unlist(err))\n  return(c('BS'=err))\n}\n\n#BestScore <- Inf\n\nnrounds= 100\n\ngc()\n\nfor(i in 1:nrounds){ # iterate over rounds\n  \n  #print(i)\n  \n  res = list() # list of 10 {train-BS,test-BS} pairs\n  \n  for( j in 1:length(booster_folds)){ # iterate over 10 folds\n    \n    fold = booster_folds[[j]]\n    \n    # update 20 dimentional dmatrix\n    succ = lapply(1:20, function(c) xgboost:::xgb.iter.update(booster=fold$booster[[c]], dtrain=fold$train[[c]],iter= i - 1, obj=NULL))\n    \n    gc()\n    \n    # eval 20 dimentional dmatrix\n    preds_train = lapply(1:20, function(c) predict(fold$booster[[c]], fold$train[[c]]))\n    preds_test = lapply(1:20, function(c) predict(fold$booster[[c]], fold$test[[c]]))\n    \n    norm_train = colSums(do.call('rbind', preds_train))\n    norm_test = colSums(do.call('rbind', preds_test))\n    \n    preds_train = lapply(1:20, function(c) preds_train[[c]]/norm_train)\n    preds_test = lapply(1:20, function(c) preds_test[[c]]/norm_test)\n    \n    eval_train = BS(preds_train, fold$train); names(eval_train) = 'train-BS'\n    eval_test = BS(preds_test, fold$test); names(eval_test) = 'test-BS'\n    \n    gc()\n    rm( preds_train, preds_test, norm_train, norm_test)\n    \n    \n    res[[j]] = c(eval_train, eval_test)\n    gc()\n    \n  }\n  \n  res = do.call('rbind', res) %>% as.data.frame\n  res = c(mean(res[,1]), sd(res[,1]), mean(res[,2]), sd(res[,2]))\n  cat('[',i,'] ',res[1],'+',res[2],'  ',res[3],'+',res[4],'\\n', sep='')\n  \n  #hist[[i]] = res\n\n  \n}\n\n#invisible(hist)\n\n\n\n\n\n\n",
    "created" : 1469453016828.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "598568657",
    "id" : "F73E3EDD",
    "lastKnownWriteTime" : 1469347850,
    "last_content_update" : 1469347850,
    "path" : "~/SPHERE-Challenge/code/models/xgboost.R",
    "project_path" : "code/models/xgboost.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}